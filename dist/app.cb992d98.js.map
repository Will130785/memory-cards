{"version":3,"sources":["../src/app.js"],"names":["clock","startBtn","document","querySelector","cards","querySelectorAll","cardBox","moveDisplay","minDisplay","secDisplay","statusDisplay","cardDeck","compare","matchTracker","moves","gameActive","secs","mins","shuffle","array","currentIndex","temporaryValue","randomIndex","length","Math","floor","random","timer","setInterval","innerHTML","addEventListener","e","deck","textContent","clearInterval","forEach","card","index","style","backgroundColor","visibility","boxShadow","html","display","opacity","battery","camera","cloud","compass","heart","phone","star","television","cardObj","trim","id","push","pop","setTimeout","background"],"mappings":"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","file":"app.cb992d98.js","sourceRoot":"../public","sourcesContent":["import \"./scss/main.scss\";\nimport battery from \"./img/battery.png\";\nimport camera from \"./img/camera.png\";\nimport cloud from \"./img/cloud.png\";\nimport compass from \"./img/compass.png\";\nimport heart from \"./img/heart.png\";\nimport phone from \"./img/phone.png\";\nimport star from \"./img/star.png\";\nimport television from \"./img/television.png\";\n\n\n//UI variables\nconst startBtn = document.querySelector(\".start\");\nconst cards = document.querySelectorAll(\".card-container\");\nconst cardBox = document.querySelectorAll(\".card\");\nconst moveDisplay = document.querySelector(\".move-display\");\nconst minDisplay = document.querySelector(\".mins\");\nconst secDisplay = document.querySelector(\".secs\");\nconst statusDisplay = document.querySelector(\".status\");\n\n\n//Gameplay variables\nlet cardDeck = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8];\nlet compare = [];\nlet matchTracker = 0;\nlet moves = 0;\nlet gameActive = 0;\n\n//Timer variables\nlet secs = 0;\nlet mins = 0;\nlet clock;\n\n//Function to shuffle cards\nconst shuffle = array => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n    \n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n\n    }\n    return array;\n};\n\n//Timer function\nconst timer = () => {\n    \n    clock = setInterval(function() {\n        //Check if seconds are equal to 50 and set to -1\n        if(secs === 59) {\n            secs = -1; // Next increment will display as 0\n            //Add to minutes\n            mins ++;\n\n        }\n        //add to seconds and display in UI\n        secs++;\n        secDisplay.innerHTML = secs;\n        minDisplay.innerHTML = mins;\n\n    }, 1000);\n};\n\n\n\n\n\n\n//Start button event listener\nstartBtn.addEventListener(\"click\", e => {\n    //Shuffle cards and reset all game UI's\n    let deck = shuffle(cardDeck);\n    gameActive = 1;\n    compare = [];\n    matchTracker = 0;\n    moves = 0;\n    secs = 0;\n    mins = 0;\n    secDisplay.innerHTML = secs;\n    minDisplay.innerHTML = mins;\n    statusDisplay.textContent = \"Game commenced!!\";\n    moveDisplay.innerHTML = moves;\n    clearInterval(clock);\n    timer();\n\n    //Loop through card container and apply styles\n    cardBox.forEach((card, index) => {\n        card.style.backgroundColor = \"#2e3d49\";\n        card.style.visibility = \"visible\";\n        card.style.boxShadow = \"0 .2rem .2rem .2rem rgba(0, 0, 0, .5)\"\n    });\n\n    //Loop through inner card and apply styles and images\n    cards.forEach((card, index) => {\n\n        card.style.display = \"flex\";\n        card.style.opacity = \"0\";\n        \n        //Declare html variable\n        let html;\n\n        //Test which deck index is assigned to each card\n        if(deck[index] === 1) {\n\n        html = `\n            <img class=\"icon\" src=\"${battery}\">\n            <span class=\"card-id\">1</span>\n            `\n        } else if(deck[index] === 2) {\n            html = `\n            <img class=\"icon\" src=\"${camera}\">\n            <span class=\"card-id\">2</span>\n             `\n        } else if(deck[index] === 3) {\n            html = `\n            <img class=\"icon\" src=\"${cloud}\">\n            <span class=\"card-id\">3</span>\n             `\n        } else if(deck[index] === 4) {\n            html = `\n            <img class=\"icon\" src=\"${compass}\">\n            <span class=\"card-id\">4</span>\n             `\n        } else if(deck[index] === 5) {\n            html = `\n            <img class=\"icon\" src=\"${heart}\">\n            <span class=\"card-id\">5</span>\n             `\n        } else if(deck[index] === 6) {\n            html = `\n            <img class=\"icon\" src=\"${phone}\">\n            <span class=\"card-id\">6</span>\n             `\n        } else if(deck[index] === 7) {\n            html = `\n            <img class=\"icon\" src=\"${star}\">\n            <span class=\"card-id\">7</span>\n             `\n        } else if(deck[index] === 8) {\n            html = `\n            <img class=\"icon\" src=\"${television}\">\n            <span class=\"card-id\">8</span>\n             `\n        };\n\n\n        //Apply html to card\n        card.innerHTML = html;\n    });\n});\n\n\n//Event listener for cards\ncards.forEach((card, index) => {\n\n    card.addEventListener(\"click\", e => {\n\n        //Check game is active\n        if(gameActive === 1) {\n\n            //Chaeck all cards have not been matched\n            if(matchTracker < 8) {\n            //Create card object and take card number and index number from selected card\n            let cardObj = {\n                card: card.textContent.trim(),\n                id: index\n          }\n            //Push card object to comparrison array\n            compare.push(cardObj);\n            card.style.opacity = \"1\";\n\n\n        //Test to see if there has been a match\n        if(compare.length === 2 && compare[0].card === compare[1].card) {\n\n            //If user clicks same card, alert that they can not do this and pop the card off the compare array\n            if(compare[0].id === compare[1].id) {\n                statusDisplay.innerHTML = \"You can't pick the same card twice\";\n                compare.pop();\n            } else {\n            //If match\n            //Alert that there has been a match\n            statusDisplay.innerHTML = \"You matched a pair!!\";\n\n            //Set time to hide cards\n            setTimeout(() => {\n                //Hide the matched cards\n                cards[compare[0].id].style.display = \"none\";\n                cards[compare[1].id].style.display = \"none\";\n                cardBox[compare[0].id].style.backgroundColor = \"none\";\n                cardBox[compare[1].id].style.backgroundColor = \"none\";\n                cardBox[compare[0].id].style.background = \"none\";\n                cardBox[compare[1].id].style.background = \"none\";\n                cardBox[compare[0].id].style.boxShadow = \"none\";\n                cardBox[compare[1].id].style.boxShadow = \"none\";\n                cardBox[compare[0].id].style.visibility = \"hidden\";\n                cardBox[compare[1].id].style.visibility = \"hidden\";\n\n            //Set compare array back to empty\n            compare = [];\n            }, 1000)\n            //Add one to the matchTracker\n            matchTracker += 1;\n            //Add one to the moveTracker\n            moves += 1;\n\n            //Check if all matches have been found\n            if(matchTracker === 8) {\n                statusDisplay.innerHTML = `All matches found, you won in ${mins} minute ${secs} seconds and in ${moves} moves`;\n                //Stop clock\n                clearInterval(clock);\n                //Change game to inactive\n                gameActive = 0;\n            }\n                \n            }\n    \n        } else if(compare.length === 2 && compare[0].card !== compare[1].card) {\n            //If not match\n            //Alert that there has been no match\n            statusDisplay.innerHTML = \"No match, try again!!\";\n            \n            //Set time to fade images away\n            setTimeout(() => {\n                cards[compare[0].id].style.opacity = \"0\";\n                cards[compare[1].id].style.opacity = \"0\";\n                //Set compare array back to empty\n                compare = [];\n            }, 1000);\n\n            //Add to moves counter\n            moves += 1;\n        \n        }\n\n        //Display moves in UI\n        moveDisplay.textContent = moves;\n\n        }\n\n       \n\n        } else {\n            statusDisplay.innerHTML = \"You need to click start to play!!\";\n        }\n    });        \n        \n\n});"]}